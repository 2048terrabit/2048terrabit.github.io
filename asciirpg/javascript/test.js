// Generated by CoffeeScript 1.10.0
(function() {
  var cc, dispatcher;

  cc = (function() {
    function cc(c, img) {
      this.c = c;
      this.ctx = c.getContext('2d');
      this.image = img;
    }

    cc.prototype.clear = function() {
      this.ctx.fillStyle = "#fff";
      return this.ctx.fillRect(1, 1, this.c.width, this.c.height);
    };

    cc.prototype.tile = function(tx, ty, cx, cy) {
      return this.ctx.drawImage(this.image, tx * 16, ty * 16, 16, 16, cx * 16, cy * 16, 16, 16);
    };

    return cc;

  })();

  dispatcher = new WebSocketRails('78.47.206.129/websocket');

  dispatcher.on_open = function(data) {
    var test_channel;
    console.log('Connection has been established');
    test_channel = dispatcher.subscribe('test');
    test_channel.bind('test_method', function(test_msg) {
      console.log('BINDING: public channgel subscribing');
      return console.log(test_msg);
    });
    return $(function() {
      var ac;
      ac = new cc(document.getElementById("canvas"), document.getElementById("tiles"));
      ac.clear();
      ac.tile(0, 0, 3, 0);
      dispatcher.trigger('level.map', 'nothing', function(map) {
        var i, results, x, y;
        results = [];
        for (x = i = 0; i <= 19; x = ++i) {
          results.push((function() {
            var j, results1;
            results1 = [];
            for (y = j = 0; j <= 19; y = ++j) {
              if (map[x][y] === 1) {
                ac.tile(0, 0, x, y);
              }
              if (map[x][y] === 0) {
                results1.push(ac.tile(1, 0, x, y));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          })());
        }
        return results;
      });
      $('#testbut').on('click', function() {
        console.log('send test msg from client');
        return cc.test;
      });
      return $('#reqmap').on('click', function() {
        return dispatcher.trigger('level.map', 'nothing', function(map) {
          var i, j, x, y;
          console.log(map);
          for (x = i = 0; i <= 19; x = ++i) {
            for (y = j = 0; j <= 19; y = ++j) {
              if (map[x][y] === 1) {
                ac.tile(0, 0, x, y);
              }
              if (map[x][y] === 0) {
                ac.tile(1, 0, x, y);
              }
            }
          }
          return $('#map').text("test");
        });
      });
    });
  };

}).call(this);
